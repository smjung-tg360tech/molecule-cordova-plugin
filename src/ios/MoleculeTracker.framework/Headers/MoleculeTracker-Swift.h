#include <TargetConditionals.h>
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoleculeTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





enum LogLevel : NSInteger;

/// The Logger protocol defines a common interface that is used to log every message from the sdk.
/// You can easily writer your own to perform custom logging.
SWIFT_PROTOCOL("_TtP15MoleculeTracker6Logger_")
@protocol Logger
/// This method should perform the logging. It can be called from every thread. The implementation has
/// to handle synchronizing different threads.
/// \param message A closure that produces the message itself.
///
/// \param level The loglevel of the message.
///
/// \param file The filename where the log was created.
///
/// \param function The funciton where the log was created.
///
/// \param line Then line where the log was created.
///
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
@end


/// This Logger loggs every message to the console with a <code>print</code> statement.
SWIFT_CLASS("_TtC15MoleculeTracker13DefaultLogger")
@interface DefaultLogger : NSObject <Logger>
- (nonnull instancetype)initWithMinLevel:(enum LogLevel)minLevel OBJC_DESIGNATED_INITIALIZER;
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MoleculeTracker6Device")
@interface Device : NSObject
/// Creates an returns a new device object representing the current device
+ (Device * _Nonnull)makeCurrentDevice SWIFT_WARN_UNUSED_RESULT;
/// The platform name of the device i.e. “iPhone1,1” or “iPad3,6”
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/// A human readable version of the platform name i.e. “iPhone 6 Plus” or “iPad Air 2 (WiFi)”
/// Will be nil if no human readable string was found.
@property (nonatomic, readonly, copy) NSString * _Nullable humanReadablePlatformName;
/// The version number of the OS as String i.e. “1.2” or “9.4”
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The screen size
@property (nonatomic, readonly) CGSize screenSize;
/// The native screen size
/// Will be CGSize.zero if the value is not defined on the running platorm.
@property (nonatomic, readonly) CGSize nativeScreenSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 10,
  LogLevelDebug = 20,
  LogLevelInfo = 30,
  LogLevelWarning = 40,
  LogLevelError = 50,
};



/// The MemoryQueue is a <em>not thread safe</em> in memory Queue.
SWIFT_CLASS("_TtC15MoleculeTracker11MemoryQueue")
@interface MemoryQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h2>Basic Usage</h2>
/// <ul>
///   <li>
///     Use the track methods to track your views, events and more.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MoleculeTracker15MoleculeTracker")
@interface MoleculeTracker : NSObject
/// Defines if the user opted out of tracking. When set to true, every event
/// will be discarded immediately. This property is persisted between app launches.
@property (nonatomic) BOOL isOptedOut;
/// Will be used to associate all future events with a given userID. This property
/// is persisted between app launches.
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable visitorId SWIFT_DEPRECATED_MSG("use userId instead");
/// Will be used to associate all future events with a given visitorId / cid. This property
/// is persisted between app launches.
/// The <code>forcedVisitorId</code> can only be a 16 character long hexadecimal string. Setting an invalid
/// string will have no effect.
@property (nonatomic, copy) NSString * _Nullable forcedVisitorId;
@property (nonatomic, strong) id <Logger> _Nonnull logger;
/// The <code>contentBase</code> is used to build the url of an Event, if the Event hasn’t got a url set.
/// This autogenerated url will then have the format <contentBase>/<actions>.
/// Per default the <code>contentBase</code> is http://<Application Bundle Name>.
/// Set the <code>contentBase</code> to nil, if you don’t want to auto generate a url.
@property (nonatomic, copy) NSURL * _Nullable contentBase;
/// Create and Configure a new Tracker
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the Molecule  server. This url has to end in <code>piwik.php</code> or <code>matomo.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
- (nonnull instancetype)initWithMid:(NSString * _Nonnull)mid mky:(NSString * _Nonnull)mky baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data
/// whenever the user leaves the application.
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
- (void)setCartListWithStr:(NSString * _Nullable)str;
- (void)setMudListWithStr:(NSString * _Nullable)str;
- (void)setSearchKeywordWithStr:(NSString * _Nullable)str;
- (void)setItemListWithStr:(NSString * _Nullable)str;
- (void)setCustomViewWithStr:(NSString * _Nonnull)str;
- (void)setActiveViewWithStr:(NSString * _Nonnull)str;
- (void)setOrderListWithStr:(NSString * _Nullable)str;
- (void)startActivityWithStr:(NSString * _Nonnull)str;
- (void)login;
- (void)join;
- (void)track;
- (void)trackContentImpressionWithName:(NSString * _Nonnull)name piece:(NSString * _Nullable)piece target:(NSString * _Nonnull)target;
- (void)trackContentInteractionWithName:(NSString * _Nonnull)name interaction:(NSString * _Nonnull)interaction;
- (NSString * _Nullable)getIdfa SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMaid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)copyFromOldSharedInstance;
@end




@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent new Custom Variable.
/// \param name The index of the new Custom Variable
///
/// \param name The name of the new Custom Variable
///
/// \param value The value of the new Custom Variable
///
- (void)setCustomVariableWithIndex:(NSUInteger)index name:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
/// Remove a previously set Custom Variable.
/// \param index The index of the Custom Variable.
///
- (void)removeCustomVariableWithIndex:(NSUInteger)index;
@end

@class NSNumber;

@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number SWIFT_DEPRECATED_MSG("use trackEventWithCategory:action:name:number:url instead");
- (void)trackSearchWithQuery:(NSString * _Nonnull)query category:(NSString * _Nullable)category resultCount:(NSInteger)resultCount url:(NSURL * _Nullable)url;
@end


@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent custom dimension by value and index.
/// This is a convenience alternative to set(dimension:) and calls the exact same functionality. Also, it is accessible from Objective-C.
/// \param value The value for the new Custom Dimension
///
/// \param forIndex The index of the new Custom Dimension
///
- (void)setDimension:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// \param index The index of the dimension.
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoleculeTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





enum LogLevel : NSInteger;

/// The Logger protocol defines a common interface that is used to log every message from the sdk.
/// You can easily writer your own to perform custom logging.
SWIFT_PROTOCOL("_TtP15MoleculeTracker6Logger_")
@protocol Logger
/// This method should perform the logging. It can be called from every thread. The implementation has
/// to handle synchronizing different threads.
/// \param message A closure that produces the message itself.
///
/// \param level The loglevel of the message.
///
/// \param file The filename where the log was created.
///
/// \param function The funciton where the log was created.
///
/// \param line Then line where the log was created.
///
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
@end


/// This Logger loggs every message to the console with a <code>print</code> statement.
SWIFT_CLASS("_TtC15MoleculeTracker13DefaultLogger")
@interface DefaultLogger : NSObject <Logger>
- (nonnull instancetype)initWithMinLevel:(enum LogLevel)minLevel OBJC_DESIGNATED_INITIALIZER;
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MoleculeTracker6Device")
@interface Device : NSObject
/// Creates an returns a new device object representing the current device
+ (Device * _Nonnull)makeCurrentDevice SWIFT_WARN_UNUSED_RESULT;
/// The platform name of the device i.e. “iPhone1,1” or “iPad3,6”
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/// A human readable version of the platform name i.e. “iPhone 6 Plus” or “iPad Air 2 (WiFi)”
/// Will be nil if no human readable string was found.
@property (nonatomic, readonly, copy) NSString * _Nullable humanReadablePlatformName;
/// The version number of the OS as String i.e. “1.2” or “9.4”
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The screen size
@property (nonatomic, readonly) CGSize screenSize;
/// The native screen size
/// Will be CGSize.zero if the value is not defined on the running platorm.
@property (nonatomic, readonly) CGSize nativeScreenSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 10,
  LogLevelDebug = 20,
  LogLevelInfo = 30,
  LogLevelWarning = 40,
  LogLevelError = 50,
};



/// The MemoryQueue is a <em>not thread safe</em> in memory Queue.
SWIFT_CLASS("_TtC15MoleculeTracker11MemoryQueue")
@interface MemoryQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h2>Basic Usage</h2>
/// <ul>
///   <li>
///     Use the track methods to track your views, events and more.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MoleculeTracker15MoleculeTracker")
@interface MoleculeTracker : NSObject
/// Defines if the user opted out of tracking. When set to true, every event
/// will be discarded immediately. This property is persisted between app launches.
@property (nonatomic) BOOL isOptedOut;
/// Will be used to associate all future events with a given userID. This property
/// is persisted between app launches.
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable visitorId SWIFT_DEPRECATED_MSG("use userId instead");
/// Will be used to associate all future events with a given visitorId / cid. This property
/// is persisted between app launches.
/// The <code>forcedVisitorId</code> can only be a 16 character long hexadecimal string. Setting an invalid
/// string will have no effect.
@property (nonatomic, copy) NSString * _Nullable forcedVisitorId;
@property (nonatomic, strong) id <Logger> _Nonnull logger;
/// The <code>contentBase</code> is used to build the url of an Event, if the Event hasn’t got a url set.
/// This autogenerated url will then have the format <contentBase>/<actions>.
/// Per default the <code>contentBase</code> is http://<Application Bundle Name>.
/// Set the <code>contentBase</code> to nil, if you don’t want to auto generate a url.
@property (nonatomic, copy) NSURL * _Nullable contentBase;
/// Create and Configure a new Tracker
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the Molecule  server. This url has to end in <code>piwik.php</code> or <code>matomo.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
- (nonnull instancetype)initWithMid:(NSString * _Nonnull)mid mky:(NSString * _Nonnull)mky baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data
/// whenever the user leaves the application.
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
- (void)setCartListWithStr:(NSString * _Nullable)str;
- (void)setMudListWithStr:(NSString * _Nullable)str;
- (void)setSearchKeywordWithStr:(NSString * _Nullable)str;
- (void)setItemListWithStr:(NSString * _Nullable)str;
- (void)setCustomViewWithStr:(NSString * _Nonnull)str;
- (void)setActiveViewWithStr:(NSString * _Nonnull)str;
- (void)setOrderListWithStr:(NSString * _Nullable)str;
- (void)startActivityWithStr:(NSString * _Nonnull)str;
- (void)login;
- (void)join;
- (void)track;
- (void)trackContentImpressionWithName:(NSString * _Nonnull)name piece:(NSString * _Nullable)piece target:(NSString * _Nonnull)target;
- (void)trackContentInteractionWithName:(NSString * _Nonnull)name interaction:(NSString * _Nonnull)interaction;
- (NSString * _Nullable)getIdfa SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMaid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)copyFromOldSharedInstance;
@end




@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent new Custom Variable.
/// \param name The index of the new Custom Variable
///
/// \param name The name of the new Custom Variable
///
/// \param value The value of the new Custom Variable
///
- (void)setCustomVariableWithIndex:(NSUInteger)index name:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
/// Remove a previously set Custom Variable.
/// \param index The index of the Custom Variable.
///
- (void)removeCustomVariableWithIndex:(NSUInteger)index;
@end

@class NSNumber;

@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number SWIFT_DEPRECATED_MSG("use trackEventWithCategory:action:name:number:url instead");
- (void)trackSearchWithQuery:(NSString * _Nonnull)query category:(NSString * _Nullable)category resultCount:(NSInteger)resultCount url:(NSURL * _Nullable)url;
@end


@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent custom dimension by value and index.
/// This is a convenience alternative to set(dimension:) and calls the exact same functionality. Also, it is accessible from Objective-C.
/// \param value The value for the new Custom Dimension
///
/// \param forIndex The index of the new Custom Dimension
///
- (void)setDimension:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// \param index The index of the dimension.
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoleculeTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





enum LogLevel : NSInteger;

/// The Logger protocol defines a common interface that is used to log every message from the sdk.
/// You can easily writer your own to perform custom logging.
SWIFT_PROTOCOL("_TtP15MoleculeTracker6Logger_")
@protocol Logger
/// This method should perform the logging. It can be called from every thread. The implementation has
/// to handle synchronizing different threads.
/// \param message A closure that produces the message itself.
///
/// \param level The loglevel of the message.
///
/// \param file The filename where the log was created.
///
/// \param function The funciton where the log was created.
///
/// \param line Then line where the log was created.
///
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
@end


/// This Logger loggs every message to the console with a <code>print</code> statement.
SWIFT_CLASS("_TtC15MoleculeTracker13DefaultLogger")
@interface DefaultLogger : NSObject <Logger>
- (nonnull instancetype)initWithMinLevel:(enum LogLevel)minLevel OBJC_DESIGNATED_INITIALIZER;
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MoleculeTracker6Device")
@interface Device : NSObject
/// Creates an returns a new device object representing the current device
+ (Device * _Nonnull)makeCurrentDevice SWIFT_WARN_UNUSED_RESULT;
/// The platform name of the device i.e. “iPhone1,1” or “iPad3,6”
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/// A human readable version of the platform name i.e. “iPhone 6 Plus” or “iPad Air 2 (WiFi)”
/// Will be nil if no human readable string was found.
@property (nonatomic, readonly, copy) NSString * _Nullable humanReadablePlatformName;
/// The version number of the OS as String i.e. “1.2” or “9.4”
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The screen size
@property (nonatomic, readonly) CGSize screenSize;
/// The native screen size
/// Will be CGSize.zero if the value is not defined on the running platorm.
@property (nonatomic, readonly) CGSize nativeScreenSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 10,
  LogLevelDebug = 20,
  LogLevelInfo = 30,
  LogLevelWarning = 40,
  LogLevelError = 50,
};



/// The MemoryQueue is a <em>not thread safe</em> in memory Queue.
SWIFT_CLASS("_TtC15MoleculeTracker11MemoryQueue")
@interface MemoryQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h2>Basic Usage</h2>
/// <ul>
///   <li>
///     Use the track methods to track your views, events and more.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MoleculeTracker15MoleculeTracker")
@interface MoleculeTracker : NSObject
/// Defines if the user opted out of tracking. When set to true, every event
/// will be discarded immediately. This property is persisted between app launches.
@property (nonatomic) BOOL isOptedOut;
/// Will be used to associate all future events with a given userID. This property
/// is persisted between app launches.
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable visitorId SWIFT_DEPRECATED_MSG("use userId instead");
/// Will be used to associate all future events with a given visitorId / cid. This property
/// is persisted between app launches.
/// The <code>forcedVisitorId</code> can only be a 16 character long hexadecimal string. Setting an invalid
/// string will have no effect.
@property (nonatomic, copy) NSString * _Nullable forcedVisitorId;
@property (nonatomic, strong) id <Logger> _Nonnull logger;
/// The <code>contentBase</code> is used to build the url of an Event, if the Event hasn’t got a url set.
/// This autogenerated url will then have the format <contentBase>/<actions>.
/// Per default the <code>contentBase</code> is http://<Application Bundle Name>.
/// Set the <code>contentBase</code> to nil, if you don’t want to auto generate a url.
@property (nonatomic, copy) NSURL * _Nullable contentBase;
/// Create and Configure a new Tracker
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the Molecule  server. This url has to end in <code>piwik.php</code> or <code>matomo.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
- (nonnull instancetype)initWithMid:(NSString * _Nonnull)mid mky:(NSString * _Nonnull)mky baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data
/// whenever the user leaves the application.
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
- (void)setCartListWithStr:(NSString * _Nullable)str;
- (void)setMudListWithStr:(NSString * _Nullable)str;
- (void)setSearchKeywordWithStr:(NSString * _Nullable)str;
- (void)setItemListWithStr:(NSString * _Nullable)str;
- (void)setCustomViewWithStr:(NSString * _Nonnull)str;
- (void)setActiveViewWithStr:(NSString * _Nonnull)str;
- (void)setOrderListWithStr:(NSString * _Nullable)str;
- (void)startActivityWithStr:(NSString * _Nonnull)str;
- (void)login;
- (void)join;
- (void)track;
- (void)trackContentImpressionWithName:(NSString * _Nonnull)name piece:(NSString * _Nullable)piece target:(NSString * _Nonnull)target;
- (void)trackContentInteractionWithName:(NSString * _Nonnull)name interaction:(NSString * _Nonnull)interaction;
- (NSString * _Nullable)getIdfa SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMaid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)copyFromOldSharedInstance;
@end




@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent new Custom Variable.
/// \param name The index of the new Custom Variable
///
/// \param name The name of the new Custom Variable
///
/// \param value The value of the new Custom Variable
///
- (void)setCustomVariableWithIndex:(NSUInteger)index name:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
/// Remove a previously set Custom Variable.
/// \param index The index of the Custom Variable.
///
- (void)removeCustomVariableWithIndex:(NSUInteger)index;
@end

@class NSNumber;

@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number SWIFT_DEPRECATED_MSG("use trackEventWithCategory:action:name:number:url instead");
- (void)trackSearchWithQuery:(NSString * _Nonnull)query category:(NSString * _Nullable)category resultCount:(NSInteger)resultCount url:(NSURL * _Nullable)url;
@end


@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent custom dimension by value and index.
/// This is a convenience alternative to set(dimension:) and calls the exact same functionality. Also, it is accessible from Objective-C.
/// \param value The value for the new Custom Dimension
///
/// \param forIndex The index of the new Custom Dimension
///
- (void)setDimension:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// \param index The index of the dimension.
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoleculeTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





enum LogLevel : NSInteger;

/// The Logger protocol defines a common interface that is used to log every message from the sdk.
/// You can easily writer your own to perform custom logging.
SWIFT_PROTOCOL("_TtP15MoleculeTracker6Logger_")
@protocol Logger
/// This method should perform the logging. It can be called from every thread. The implementation has
/// to handle synchronizing different threads.
/// \param message A closure that produces the message itself.
///
/// \param level The loglevel of the message.
///
/// \param file The filename where the log was created.
///
/// \param function The funciton where the log was created.
///
/// \param line Then line where the log was created.
///
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
@end


/// This Logger loggs every message to the console with a <code>print</code> statement.
SWIFT_CLASS("_TtC15MoleculeTracker13DefaultLogger")
@interface DefaultLogger : NSObject <Logger>
- (nonnull instancetype)initWithMinLevel:(enum LogLevel)minLevel OBJC_DESIGNATED_INITIALIZER;
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MoleculeTracker6Device")
@interface Device : NSObject
/// Creates an returns a new device object representing the current device
+ (Device * _Nonnull)makeCurrentDevice SWIFT_WARN_UNUSED_RESULT;
/// The platform name of the device i.e. “iPhone1,1” or “iPad3,6”
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/// A human readable version of the platform name i.e. “iPhone 6 Plus” or “iPad Air 2 (WiFi)”
/// Will be nil if no human readable string was found.
@property (nonatomic, readonly, copy) NSString * _Nullable humanReadablePlatformName;
/// The version number of the OS as String i.e. “1.2” or “9.4”
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The screen size
@property (nonatomic, readonly) CGSize screenSize;
/// The native screen size
/// Will be CGSize.zero if the value is not defined on the running platorm.
@property (nonatomic, readonly) CGSize nativeScreenSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 10,
  LogLevelDebug = 20,
  LogLevelInfo = 30,
  LogLevelWarning = 40,
  LogLevelError = 50,
};



/// The MemoryQueue is a <em>not thread safe</em> in memory Queue.
SWIFT_CLASS("_TtC15MoleculeTracker11MemoryQueue")
@interface MemoryQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h2>Basic Usage</h2>
/// <ul>
///   <li>
///     Use the track methods to track your views, events and more.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MoleculeTracker15MoleculeTracker")
@interface MoleculeTracker : NSObject
/// Defines if the user opted out of tracking. When set to true, every event
/// will be discarded immediately. This property is persisted between app launches.
@property (nonatomic) BOOL isOptedOut;
/// Will be used to associate all future events with a given userID. This property
/// is persisted between app launches.
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable visitorId SWIFT_DEPRECATED_MSG("use userId instead");
/// Will be used to associate all future events with a given visitorId / cid. This property
/// is persisted between app launches.
/// The <code>forcedVisitorId</code> can only be a 16 character long hexadecimal string. Setting an invalid
/// string will have no effect.
@property (nonatomic, copy) NSString * _Nullable forcedVisitorId;
@property (nonatomic, strong) id <Logger> _Nonnull logger;
/// The <code>contentBase</code> is used to build the url of an Event, if the Event hasn’t got a url set.
/// This autogenerated url will then have the format <contentBase>/<actions>.
/// Per default the <code>contentBase</code> is http://<Application Bundle Name>.
/// Set the <code>contentBase</code> to nil, if you don’t want to auto generate a url.
@property (nonatomic, copy) NSURL * _Nullable contentBase;
/// Create and Configure a new Tracker
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the Molecule  server. This url has to end in <code>piwik.php</code> or <code>matomo.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
- (nonnull instancetype)initWithMid:(NSString * _Nonnull)mid mky:(NSString * _Nonnull)mky baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data
/// whenever the user leaves the application.
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
- (void)setCartListWithStr:(NSString * _Nullable)str;
- (void)setMudListWithStr:(NSString * _Nullable)str;
- (void)setSearchKeywordWithStr:(NSString * _Nullable)str;
- (void)setItemListWithStr:(NSString * _Nullable)str;
- (void)setCustomViewWithStr:(NSString * _Nonnull)str;
- (void)setActiveViewWithStr:(NSString * _Nonnull)str;
- (void)setOrderListWithStr:(NSString * _Nullable)str;
- (void)startActivityWithStr:(NSString * _Nonnull)str;
- (void)login;
- (void)join;
- (void)track;
- (void)trackContentImpressionWithName:(NSString * _Nonnull)name piece:(NSString * _Nullable)piece target:(NSString * _Nonnull)target;
- (void)trackContentInteractionWithName:(NSString * _Nonnull)name interaction:(NSString * _Nonnull)interaction;
- (NSString * _Nullable)getIdfa SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMaid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)copyFromOldSharedInstance;
@end




@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent new Custom Variable.
/// \param name The index of the new Custom Variable
///
/// \param name The name of the new Custom Variable
///
/// \param value The value of the new Custom Variable
///
- (void)setCustomVariableWithIndex:(NSUInteger)index name:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
/// Remove a previously set Custom Variable.
/// \param index The index of the Custom Variable.
///
- (void)removeCustomVariableWithIndex:(NSUInteger)index;
@end

@class NSNumber;

@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number SWIFT_DEPRECATED_MSG("use trackEventWithCategory:action:name:number:url instead");
- (void)trackSearchWithQuery:(NSString * _Nonnull)query category:(NSString * _Nullable)category resultCount:(NSInteger)resultCount url:(NSURL * _Nullable)url;
@end


@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent custom dimension by value and index.
/// This is a convenience alternative to set(dimension:) and calls the exact same functionality. Also, it is accessible from Objective-C.
/// \param value The value for the new Custom Dimension
///
/// \param forIndex The index of the new Custom Dimension
///
- (void)setDimension:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// \param index The index of the dimension.
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoleculeTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





enum LogLevel : NSInteger;

/// The Logger protocol defines a common interface that is used to log every message from the sdk.
/// You can easily writer your own to perform custom logging.
SWIFT_PROTOCOL("_TtP15MoleculeTracker6Logger_")
@protocol Logger
/// This method should perform the logging. It can be called from every thread. The implementation has
/// to handle synchronizing different threads.
/// \param message A closure that produces the message itself.
///
/// \param level The loglevel of the message.
///
/// \param file The filename where the log was created.
///
/// \param function The funciton where the log was created.
///
/// \param line Then line where the log was created.
///
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
@end


/// This Logger loggs every message to the console with a <code>print</code> statement.
SWIFT_CLASS("_TtC15MoleculeTracker13DefaultLogger")
@interface DefaultLogger : NSObject <Logger>
- (nonnull instancetype)initWithMinLevel:(enum LogLevel)minLevel OBJC_DESIGNATED_INITIALIZER;
- (void)log:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message with:(enum LogLevel)level file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MoleculeTracker6Device")
@interface Device : NSObject
/// Creates an returns a new device object representing the current device
+ (Device * _Nonnull)makeCurrentDevice SWIFT_WARN_UNUSED_RESULT;
/// The platform name of the device i.e. “iPhone1,1” or “iPad3,6”
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/// A human readable version of the platform name i.e. “iPhone 6 Plus” or “iPad Air 2 (WiFi)”
/// Will be nil if no human readable string was found.
@property (nonatomic, readonly, copy) NSString * _Nullable humanReadablePlatformName;
/// The version number of the OS as String i.e. “1.2” or “9.4”
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// The screen size
@property (nonatomic, readonly) CGSize screenSize;
/// The native screen size
/// Will be CGSize.zero if the value is not defined on the running platorm.
@property (nonatomic, readonly) CGSize nativeScreenSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 10,
  LogLevelDebug = 20,
  LogLevelInfo = 30,
  LogLevelWarning = 40,
  LogLevelError = 50,
};



/// The MemoryQueue is a <em>not thread safe</em> in memory Queue.
SWIFT_CLASS("_TtC15MoleculeTracker11MemoryQueue")
@interface MemoryQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h2>Basic Usage</h2>
/// <ul>
///   <li>
///     Use the track methods to track your views, events and more.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MoleculeTracker15MoleculeTracker")
@interface MoleculeTracker : NSObject
/// Defines if the user opted out of tracking. When set to true, every event
/// will be discarded immediately. This property is persisted between app launches.
@property (nonatomic) BOOL isOptedOut;
/// Will be used to associate all future events with a given userID. This property
/// is persisted between app launches.
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable visitorId SWIFT_DEPRECATED_MSG("use userId instead");
/// Will be used to associate all future events with a given visitorId / cid. This property
/// is persisted between app launches.
/// The <code>forcedVisitorId</code> can only be a 16 character long hexadecimal string. Setting an invalid
/// string will have no effect.
@property (nonatomic, copy) NSString * _Nullable forcedVisitorId;
@property (nonatomic, strong) id <Logger> _Nonnull logger;
/// The <code>contentBase</code> is used to build the url of an Event, if the Event hasn’t got a url set.
/// This autogenerated url will then have the format <contentBase>/<actions>.
/// Per default the <code>contentBase</code> is http://<Application Bundle Name>.
/// Set the <code>contentBase</code> to nil, if you don’t want to auto generate a url.
@property (nonatomic, copy) NSURL * _Nullable contentBase;
/// Create and Configure a new Tracker
/// A volatile memory queue will be used to store the analytics data. All not transmitted data will be lost when the application gets terminated.
/// The URLSessionDispatcher will be used to transmit the data to the server.
/// \param siteId The unique site id generated by the server when a new site was created.
///
/// \param baseURL The url of the Molecule  server. This url has to end in <code>piwik.php</code> or <code>matomo.php</code>.
///
/// \param userAgent An optional parameter for custom user agent.
///
- (nonnull instancetype)initWithMid:(NSString * _Nonnull)mid mky:(NSString * _Nonnull)mky baseURL:(NSURL * _Nonnull)baseURL userAgent:(NSString * _Nullable)userAgent;
/// Manually start the dispatching process. You might want to call this method in AppDelegates <code>applicationDidEnterBackground</code> to transmit all data
/// whenever the user leaves the application.
- (void)dispatch;
@property (nonatomic) NSTimeInterval dispatchInterval;
- (void)setCartListWithStr:(NSString * _Nullable)str;
- (void)setMudListWithStr:(NSString * _Nullable)str;
- (void)setSearchKeywordWithStr:(NSString * _Nullable)str;
- (void)setItemListWithStr:(NSString * _Nullable)str;
- (void)setCustomViewWithStr:(NSString * _Nonnull)str;
- (void)setActiveViewWithStr:(NSString * _Nonnull)str;
- (void)setOrderListWithStr:(NSString * _Nullable)str;
- (void)startActivityWithStr:(NSString * _Nonnull)str;
- (void)login;
- (void)join;
- (void)track;
- (void)trackContentImpressionWithName:(NSString * _Nonnull)name piece:(NSString * _Nullable)piece target:(NSString * _Nonnull)target;
- (void)trackContentInteractionWithName:(NSString * _Nonnull)name interaction:(NSString * _Nonnull)interaction;
- (NSString * _Nullable)getIdfa SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getMaid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)copyFromOldSharedInstance;
@end




@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent new Custom Variable.
/// \param name The index of the new Custom Variable
///
/// \param name The name of the new Custom Variable
///
/// \param value The value of the new Custom Variable
///
- (void)setCustomVariableWithIndex:(NSUInteger)index name:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
/// Remove a previously set Custom Variable.
/// \param index The index of the Custom Variable.
///
- (void)removeCustomVariableWithIndex:(NSUInteger)index;
@end

@class NSNumber;

@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number url:(NSURL * _Nullable)url;
- (void)trackWithEventWithCategory:(NSString * _Nonnull)category action:(NSString * _Nonnull)action name:(NSString * _Nullable)name number:(NSNumber * _Nullable)number SWIFT_DEPRECATED_MSG("use trackEventWithCategory:action:name:number:url instead");
- (void)trackSearchWithQuery:(NSString * _Nonnull)query category:(NSString * _Nullable)category resultCount:(NSInteger)resultCount url:(NSURL * _Nullable)url;
@end


@interface MoleculeTracker (SWIFT_EXTENSION(MoleculeTracker))
/// Set a permanent custom dimension by value and index.
/// This is a convenience alternative to set(dimension:) and calls the exact same functionality. Also, it is accessible from Objective-C.
/// \param value The value for the new Custom Dimension
///
/// \param forIndex The index of the new Custom Dimension
///
- (void)setDimension:(NSString * _Nonnull)value forIndex:(NSInteger)index;
/// Removes a previously set custom dimension.
/// Use this method to remove a dimension that was set using the <code>set(value: String, forDimension index: Int)</code> method.
/// \param index The index of the dimension.
///
- (void)removeWithDimensionAtIndex:(NSInteger)index;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
